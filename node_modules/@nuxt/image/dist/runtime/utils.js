export function cleanDoubleSlashes(path) {
    return path.replace(/(https?:\/\/)|(\/)+/g, '$1$2');
}
export function createMapper(map) {
    return (key) => {
        return map[key] || key || map.missingValue;
    };
}
export function createOperationsGenerator({ formatter, keyMap, joinWith = '/', valueMap } = {}) {
    if (!formatter) {
        formatter = (key, value) => `${key}=${value}`;
    }
    if (keyMap && typeof keyMap !== 'function') {
        keyMap = createMapper(keyMap);
    }
    valueMap = valueMap || {};
    Object.keys(valueMap).forEach((valueKey) => {
        if (typeof valueMap[valueKey] !== 'function') {
            valueMap[valueKey] = createMapper(valueMap[valueKey]);
        }
    });
    return (modifiers) => {
        const operations = Object.entries(modifiers)
            .filter(([_, value]) => typeof value !== 'undefined')
            .map(([key, value]) => {
            const mapper = valueMap[key];
            if (typeof mapper === 'function') {
                value = mapper(modifiers[key]);
            }
            key = typeof keyMap === 'function' ? keyMap(key) : key;
            return formatter(key, value);
        });
        return operations.join(joinWith);
    };
}
export function renderAttributesToString(attributes = {}) {
    return Object.entries(attributes)
        .map(([key, value]) => value ? `${key}="${value}"` : '')
        .filter(Boolean).join(' ');
}
export function renderTag(tag, attrs, contents) {
    const html = `<${tag} ${renderAttributesToString(attrs)}>`;
    if (!contents) {
        return html;
    }
    return html + contents + `</${tag}>`;
}
const modernFormats = ['webp', 'avif'];
export function isModernFormat(path) {
    return modernFormats.includes(String(path).split('.').pop());
}
