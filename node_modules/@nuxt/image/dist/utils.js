"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hash = exports.getFileExtension = exports.downloadImage = exports.tryRequire = exports.logger = void 0;
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const consola_1 = __importDefault(require("consola"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const hasha_1 = __importDefault(require("hasha"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const streamPipeline = util_1.default.promisify(require('stream').pipeline);
exports.logger = consola_1.default.withScope('@nuxt/image');
function tryRequire(id) {
    try {
        const m = require(id);
        return m.default || m;
    }
    catch (_err) { }
}
exports.tryRequire = tryRequire;
async function downloadImage({ url, name, outDir }) {
    try {
        const response = await node_fetch_1.default(url);
        if (!response.ok) {
            throw new Error(`unexpected response ${response.statusText}`);
        }
        await streamPipeline(response.body, fs_extra_1.default.createWriteStream(path_1.default.join(outDir, name)));
        exports.logger.success('Generated image ' + name);
    }
    catch (error) {
        exports.logger.error(error.message);
    }
}
exports.downloadImage = downloadImage;
function getFileExtension(url) {
    const extension = url.split(/[?#]/).shift().split('/').pop().split('.').pop();
    return extension;
}
exports.getFileExtension = getFileExtension;
function hash(value, length = 6) {
    return hasha_1.default(value).substr(0, length);
}
exports.hash = hash;
